//
//  LogIn.swift
//  Holiday Calendar
//
//  Created by Al Housseini, Ahmad on 05.01.25.
//

import SwiftUI

struct LogIn: View {
    @StateObject private var viewModel = AuthViewModel()
    @State var email: String = ""
    @State private var password = ""
    @AppStorage("isLoggedIn")  var isLoggedIn = false
    @State private var shouldShake = false // for shake animation
    @State private var fadeOut = false // For fade-out animation
    @State private var showSuccessCheckmark = false // show green check mark
    
    // make the screen shake, generated by LLM 
    struct ShakeEffect: GeometryEffect {
        var animatableData: CGFloat

        func effectValue(size: CGSize) -> ProjectionTransform {
            ProjectionTransform(CGAffineTransform(translationX: 10 * sin(animatableData * .pi * 2), y: 0))
        }
    }
    var body: some View {
        NavigationView {
            ZStack {
                if isLoggedIn{
                    Mainpage()
                        .transition(.scale.combined(with: .opacity))
                        .animation(.easeInOut(duration: 0.5), value: isLoggedIn)
                } else {
                    VStack{
                        Image(.passwordilust)
                            .resizable()
                            .scaledToFit()
                            .padding()
                            .frame(width: 350, height: 350)
                        Text("Login")
                            .font(.custom("Georgia", size: 36))
                            .padding()
                            .fontWeight(.bold)
                        
                        
                        VStack(spacing: 20){
                            
                            TextField("Email", text: $email)
                                .padding(.horizontal, 10)
                                .frame(width: 300, height: 50)
                                .overlay(
                                    RoundedRectangle(cornerSize:CGSize(width: 4, height: 4))
                                        .stroke(style: StrokeStyle(lineWidth: 1, lineCap: .round))
                                )
                            SecureField("Password", text: $password)
                                .padding(.horizontal, 10)
                                .frame(width: 300, height: 50)
                                .overlay(
                                    RoundedRectangle(cornerSize:CGSize(width: 4, height: 4))
                                        .stroke(style: StrokeStyle(lineWidth: 1, lineCap: .round))
                                )
                            
                            Button (action : {
                                print("Button pressed")
                                
                                viewModel.signIn(email: email, password: password) { success in
                                    if success {
                                        withAnimation {
                                            fadeOut = true
                                            showSuccessCheckmark = true
                                            
                                        }
                                        // Update state on success
                                        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
                                            isLoggedIn = true // Navigate to Mainpage
                                        }
                                    }
                                }
                            }) {
                                Text("Log In")
                                    .padding(.horizontal, 10)
                                    .frame(width: 300, height: 50)
                                    .overlay(
                                        RoundedRectangle(cornerSize:CGSize(width: 4, height: 4))
                                            .stroke(style: StrokeStyle(lineWidth: 1, lineCap: .round))
                                    )
                                
                            }
                            // Handle error
                            if viewModel.showError , let errorMessage = viewModel.errorMessage{
                                
                                ErrorMessage(message: errorMessage)
                                    .transition(.move(edge: .top).combined(with: .opacity))
                                    .onAppear {
                                        shouldShake.toggle()
                                    }
                                
                            }
                            HStack {
                                Text("Don't have an account yet?")
                                NavigationLink(destination: SignUP() ) {
                                    Text("Register now")
                                        .underline()
                                    
                                }
                            }
                            .font(.caption)
                            .padding(.horizontal, 10)
                            
                        }
                    }
                    .modifier(shouldShake ? ShakeEffect(animatableData: CGFloat(3)) : ShakeEffect(animatableData: 0)) // Apply shake effect
                    .opacity(fadeOut ? 0.0 : 1.0) // Fade out animation
                    .animation(.easeInOut(duration: 0.5), value: fadeOut)
                    
                    if showSuccessCheckmark {
                        Image(systemName: "checkmark.circle.fill")
                            .font(.system(size: 100))
                            .foregroundColor(.green)
                            .transition(.scale)
                            .animation(.easeInOut(duration: 0.5), value: showSuccessCheckmark)
                            
                    }
                }
            }
            
        }.navigationViewStyle(StackNavigationViewStyle())
        
        }
        
        
    }

#Preview {
    LogIn()
}
