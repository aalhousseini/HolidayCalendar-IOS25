//
//  AuthViewModel.swift
//  Holiday Calendar
//
//  Created by Al Housseini, Ahmad on 05.01.25.
//
// to respect the MVVM
import Foundation
import SwiftData

class AuthViewModel: ObservableObject{
    @Published var isLoggedIn = false
    @Published var errorMessage: String?
    @Published var showError = false
    @Published var calendars: [CalendarModel] = []
    // @Environment(\.modelContext) var modelContext: ModelContext?

    private let api = FirebaseAuthAPI()
    private let userStore = SaveToFireStore()
    private let localStore = SwiftDataSaver()

    
    func signUp(username: String, name: String, email: String, password: String, modelContext:ModelContext, completion: @escaping (Bool) -> Void) {
        api.signUp(email: email, password: password) { result in
            DispatchQueue.main.async {
                self.handleSignUpResult(result: result, username: username, name: name, email: email, password:password,modelcontext: modelContext, completion: completion)
            }
        }
    }

    private func handleSignUpResult(result: Result<(idToken: String, userId: String), Error>, username: String, name: String, email: String, password: String, modelcontext:ModelContext, completion: @escaping (Bool) -> Void) {
        switch result {
        case .success(let (idToken, userId)):
            self.saveUserToFirestore(uid: userId, username: username, name: name, email: email, password: password, idToken: idToken) { fireStoreSuccess in
                if fireStoreSuccess {
                    let userData: [String: Any] = [
                        "username": username,
                        "name": name,
                        "email": email,
                        "password": password
                    ]
                    self.localStore.putUser(userId: userId, data: userData, modelContext: modelcontext)
                }
                completion(fireStoreSuccess)
            }

            
            
            self.isLoggedIn = true
            self.errorMessage = nil
            self.showError = false
            
        case .failure(let error):
            self.isLoggedIn = false
            self.errorMessage = error.localizedDescription
            self.showError = true
            completion(false)
        }
    }

    private func saveUserToFirestore(uid: String, username: String, name: String, email: String,password:String, idToken: String, completion: @escaping (Bool) -> Void) {
        userStore.saveUser(uid: uid, username: username, name: name, email: email, password:password, idToken: idToken) { saveResult in
            DispatchQueue.main.async {
                switch saveResult {
                case .success:
                    self.isLoggedIn = true
                    self.errorMessage = nil
                    self.showError = false
                    completion(true)
                case .failure(let error):
                    self.isLoggedIn = false
//                    self.showError = true
//                    self.errorMessage = error.localizedDescription
                    self.showErrorMessage(error.localizedDescription)
                    completion(false)
                }
            }
        }
    }

    // generated by LLM , to enable animation
    func showErrorMessage(_ message: String) {
        errorMessage = message
        showError = true
        
        DispatchQueue.main.asyncAfter(deadline: .now() + 5) { [weak self] in
            self?.showError = false
        }
    }

    func signIn(email: String, password: String, completion: @escaping (Bool) -> Void) {
        api.signIn(email: email, password: password) { result in
            DispatchQueue.main.async {
                switch result {
                case .success(let token):
                    print("Sign-In Success! Token: \(token)")
                    self.isLoggedIn = true
                    self.errorMessage = nil
                    completion(true)
                case .failure(let error):
                    print("Sign-In Failed: \(error.localizedDescription)")
                    self.isLoggedIn = false
//                    self.showError = true
//                    self.errorMessage = error.localizedDescription
                    self.showErrorMessage(error.localizedDescription)
                    completion(false)
                }
            }
        }
    }

    
//    func saveCalendar(name: String, startDate: Date, doors: [Door], completion: @escaping (Bool) -> Void) {
//        // Create a CalendarModel instance with all required parameters
//        let newCalendar = CalendarModel(
//        //    id: UUID().uuidString, // Generate a unique ID if it's required
//            name: name,
//            startDate: startDate,
//            doors: doors
//        )
//        
//        // Save to Firestore or wherever the save operation is happening
//        userStore.saveCalendar(newCalendar) { result in
//            DispatchQueue.main.async {
//                switch result {
//                case .success:
//                    self.calendars.append(newCalendar) // Add to the local array
//                    completion(true)
//                case .failure(let error):
//                    self.errorMessage = error.localizedDescription
//                    completion(false)
//                }
//            }
//        }
//    }

    }
